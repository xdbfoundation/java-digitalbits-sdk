// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

package io.digitalbits.sdk.xdr;


import java.io.IOException;

import com.google.common.base.Objects;
import java.util.Arrays;

// === xdr source ============================================================

//  struct DigitalBitsValue
//  {
//      Hash txSetHash;      // transaction set to apply to previous ledger
//      TimePoint closeTime; // network close time
//  
//      // upgrades to apply to the previous ledger (usually empty)
//      // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop
//      // unknown steps during consensus if needed.
//      // see notes below on 'LedgerUpgrade' for more detail
//      // max size is dictated by number of upgrade types (+ room for future)
//      UpgradeType upgrades<6>;
//  
//      // reserved for future use
//      union switch (DigitalBitsValueType v)
//      {
//      case DIGITALBITS_VALUE_BASIC:
//          void;
//      case DIGITALBITS_VALUE_SIGNED:
//          LedgerCloseValueSignature lcValueSignature;
//      }
//      ext;
//  };

//  ===========================================================================
public class DigitalBitsValue implements XdrElement {
  public DigitalBitsValue () {}
  private Hash txSetHash;
  public Hash getTxSetHash() {
    return this.txSetHash;
  }
  public void setTxSetHash(Hash value) {
    this.txSetHash = value;
  }
  private TimePoint closeTime;
  public TimePoint getCloseTime() {
    return this.closeTime;
  }
  public void setCloseTime(TimePoint value) {
    this.closeTime = value;
  }
  private UpgradeType[] upgrades;
  public UpgradeType[] getUpgrades() {
    return this.upgrades;
  }
  public void setUpgrades(UpgradeType[] value) {
    this.upgrades = value;
  }
  private DigitalBitsValueExt ext;
  public DigitalBitsValueExt getExt() {
    return this.ext;
  }
  public void setExt(DigitalBitsValueExt value) {
    this.ext = value;
  }
  public static void encode(XdrDataOutputStream stream, DigitalBitsValue encodedDigitalBitsValue) throws IOException{
    Hash.encode(stream, encodedDigitalBitsValue.txSetHash);
    TimePoint.encode(stream, encodedDigitalBitsValue.closeTime);
    int upgradessize = encodedDigitalBitsValue.getUpgrades().length;
    stream.writeInt(upgradessize);
    for (int i = 0; i < upgradessize; i++) {
      UpgradeType.encode(stream, encodedDigitalBitsValue.upgrades[i]);
    }
    DigitalBitsValueExt.encode(stream, encodedDigitalBitsValue.ext);
  }
  public void encode(XdrDataOutputStream stream) throws IOException {
    encode(stream, this);
  }
  public static DigitalBitsValue decode(XdrDataInputStream stream) throws IOException {
    DigitalBitsValue decodedDigitalBitsValue = new DigitalBitsValue();
    decodedDigitalBitsValue.txSetHash = Hash.decode(stream);
    decodedDigitalBitsValue.closeTime = TimePoint.decode(stream);
    int upgradessize = stream.readInt();
    decodedDigitalBitsValue.upgrades = new UpgradeType[upgradessize];
    for (int i = 0; i < upgradessize; i++) {
      decodedDigitalBitsValue.upgrades[i] = UpgradeType.decode(stream);
    }
    decodedDigitalBitsValue.ext = DigitalBitsValueExt.decode(stream);
    return decodedDigitalBitsValue;
  }
  @Override
  public int hashCode() {
    return Objects.hashCode(this.txSetHash, this.closeTime, Arrays.hashCode(this.upgrades), this.ext);
  }
  @Override
  public boolean equals(Object object) {
    if (!(object instanceof DigitalBitsValue)) {
      return false;
    }

    DigitalBitsValue other = (DigitalBitsValue) object;
    return Objects.equal(this.txSetHash, other.txSetHash) && Objects.equal(this.closeTime, other.closeTime) && Arrays.equals(this.upgrades, other.upgrades) && Objects.equal(this.ext, other.ext);
  }

  public static final class Builder {
    private Hash txSetHash;
    private TimePoint closeTime;
    private UpgradeType[] upgrades;
    private DigitalBitsValueExt ext;

    public Builder txSetHash(Hash txSetHash) {
      this.txSetHash = txSetHash;
      return this;
    }

    public Builder closeTime(TimePoint closeTime) {
      this.closeTime = closeTime;
      return this;
    }

    public Builder upgrades(UpgradeType[] upgrades) {
      this.upgrades = upgrades;
      return this;
    }

    public Builder ext(DigitalBitsValueExt ext) {
      this.ext = ext;
      return this;
    }

    public DigitalBitsValue build() {
      DigitalBitsValue val = new DigitalBitsValue();
      val.setTxSetHash(txSetHash);
      val.setCloseTime(closeTime);
      val.setUpgrades(upgrades);
      val.setExt(ext);
      return val;
    }
  }

  public static class DigitalBitsValueExt {
    public DigitalBitsValueExt () {}
    DigitalBitsValueType v;
    public DigitalBitsValueType getDiscriminant() {
      return this.v;
    }
    public void setDiscriminant(DigitalBitsValueType value) {
      this.v = value;
    }
    private LedgerCloseValueSignature lcValueSignature;
    public LedgerCloseValueSignature getLcValueSignature() {
      return this.lcValueSignature;
    }
    public void setLcValueSignature(LedgerCloseValueSignature value) {
      this.lcValueSignature = value;
    }

    public static final class Builder {
      private DigitalBitsValueType discriminant;
      private LedgerCloseValueSignature lcValueSignature;

      public Builder discriminant(DigitalBitsValueType discriminant) {
        this.discriminant = discriminant;
        return this;
      }

      public Builder lcValueSignature(LedgerCloseValueSignature lcValueSignature) {
        this.lcValueSignature = lcValueSignature;
        return this;
      }

      public DigitalBitsValueExt build() {
        DigitalBitsValueExt val = new DigitalBitsValueExt();
        val.setDiscriminant(discriminant);
        val.setLcValueSignature(lcValueSignature);
        return val;
      }
    }

    public static void encode(XdrDataOutputStream stream, DigitalBitsValueExt encodedDigitalBitsValueExt) throws IOException {
    //Xdrgen::AST::Identifier
    //DigitalBitsValueType
    stream.writeInt(encodedDigitalBitsValueExt.getDiscriminant().getValue());
    switch (encodedDigitalBitsValueExt.getDiscriminant()) {
    case DIGITALBITS_VALUE_BASIC:
    break;
    case DIGITALBITS_VALUE_SIGNED:
    LedgerCloseValueSignature.encode(stream, encodedDigitalBitsValueExt.lcValueSignature);
    break;
    }
    }
    public void encode(XdrDataOutputStream stream) throws IOException {
      encode(stream, this);
    }
    public static DigitalBitsValueExt decode(XdrDataInputStream stream) throws IOException {
    DigitalBitsValueExt decodedDigitalBitsValueExt = new DigitalBitsValueExt();
    DigitalBitsValueType discriminant = DigitalBitsValueType.decode(stream);
    decodedDigitalBitsValueExt.setDiscriminant(discriminant);
    switch (decodedDigitalBitsValueExt.getDiscriminant()) {
    case DIGITALBITS_VALUE_BASIC:
    break;
    case DIGITALBITS_VALUE_SIGNED:
    decodedDigitalBitsValueExt.lcValueSignature = LedgerCloseValueSignature.decode(stream);
    break;
    }
      return decodedDigitalBitsValueExt;
    }
    @Override
    public int hashCode() {
      return Objects.hashCode(this.lcValueSignature, this.v);
    }
    @Override
    public boolean equals(Object object) {
      if (!(object instanceof DigitalBitsValueExt)) {
        return false;
      }

      DigitalBitsValueExt other = (DigitalBitsValueExt) object;
      return Objects.equal(this.lcValueSignature, other.lcValueSignature) && Objects.equal(this.v, other.v);
    }

  }
}
